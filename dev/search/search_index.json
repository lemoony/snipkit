{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SnipKit","text":""},{"location":"#execute-the-scripts-saved-in-your-favorite-snippet-manager-without-even-leaving-the-terminal","title":"Execute the scripts saved in your favorite snippet manager without even leaving the terminal.","text":"<p>Retrieve snippets from a list of external snippet managers, so you can keep your scripts all at one place and manage  them more easily:</p> <ul> <li> <p>Search for snippets by typing.</p> </li> <li> <p>Execute them with parameters. Define default values or a list of pre-defined values to pick from.</p> </li> <li> <p>Customize SnipKit with a theme to match the look of your terminal.</p> </li> </ul> <p>Getting started</p>"},{"location":"configuration/overview/","title":"Configuration","text":"<p>Snipkit requires a configuration file to be present. The configuration file resides in the snipkit home directory.</p>"},{"location":"configuration/overview/#home-directory","title":"Home directory","text":"<p>The path to the home directory is assumed to be <code>{$XDG_CONFIG_HOME}/snipkit</code>. The value of <code>XDG_CONFIG_HOME</code> is specified by the XDG Base Directory Specification. If not set explicitly, a sensible default value for your operating system is assumed:</p> <ul> <li><code>macOS</code>: ~/Library/Application Support/snipkit</li> <li><code>Linux</code>: ~/.config/snipkit</li> </ul> <p>You can specify another directory to be used by SnipKit be setting the environment variable <code>SNIPKIT_HOME</code>. E.g., you may want to put the following into your <code>~/.zshrc</code> file:</p> <pre><code>export SNIPKIT_HOME=/Users/&lt;user&gt;/.snipkit\n</code></pre> <p>Use absolute paths for <code>SNIPKIT_HOME</code></p> <p>Please make sure to use an absolute path for <code>SNIPKIT_HOME</code> and do not use the tilde (~) character to point to your  home directory. Otherwise, SnipKit will not be able to find your configuration file.</p>"},{"location":"configuration/overview/#initialization","title":"Initialization","text":"<p>In order to create a config file for SnipKit, execute:</p> <pre><code>snipkit config init\n</code></pre> <p>This command creates a config file in the SnipKit home directory. The initial config file looks similar to this:</p> config.yaml<pre><code>version: 1.1.1\nconfig:\n  style:\n    # The theme defines the terminal colors used by Snipkit.\n    # Available themes:default,dracula.\n    theme: default\n  # Your preferred editor to open the config file when typing 'snipkit config edit'.\n  editor: \"\" # Defaults to a reasonable value for your operation system when empty.\n  # The command which should run if you don't provide any subcommand.\n  defaultRootCommand: \"\" # If not set, the help text will be shown.\n  # Enable fuzzy searching for snippet titles.\n  fuzzySearch: true\n</code></pre> <p>No snippet manager has been added at this time. In order to add a one execute:</p> <pre><code>snipkit manager add\n</code></pre> <p>For more information on the different managers supported, please see Managers.</p>"},{"location":"configuration/overview/#migration","title":"Migration","text":"<p>The config file may change from time to time. If you use an outdated config file version, Snipkit will refuse to run.  Fortunately, you can migrate your config file to the latest version:</p> <pre><code>snipkit config migrate\n</code></pre>"},{"location":"configuration/overview/#config-options","title":"Config options","text":""},{"location":"configuration/overview/#editor","title":"Editor","text":"<p>When typing <code>snipkit config edit</code> the configuration file will be opened in an editor of your choice.</p> <p>The default editor is defined by the <code>$VISUAL</code> or <code>$EDITOR</code> environment variables. This behavior can be overwritten by setting the <code>editor</code> field in the configuration file to a non-empty string, e.g.:</p> config.yaml<pre><code>version: 1.1.1\nconfig:\n  editor: \"code\"\n</code></pre> <p>If no value is provided at all, SnipKit will try to use <code>vim</code>.</p>"},{"location":"configuration/overview/#default-root-command","title":"Default Root Command","text":"<p>Most of the time, you want to call the same subcommand, e.g. <code>print</code> or <code>exec</code>. You can configure <code>snipkit</code> so that this command gets executed by default:</p> config.yaml<pre><code>version: 1.1.1\nconfig:\n  defaultRootCommand: \"exec\"\n</code></pre> <p>This way, calling <code>snipkit</code> will yield the same result as <code>snipkit exec</code>. If you want to call the <code>print</code> command instead, you can still call <code>snipkit print</code>.</p>"},{"location":"configuration/overview/#fuzzy-search","title":"Fuzzy search","text":"<p>Enable fuzzy searching for snippet titles. This leads to potentially more snippets matching the search criteria. Snipkit will try to rank them according to similarity. Disable fuzzy search for performance reason or if you just don't like.</p> config.yaml<pre><code>version: 1.1.1\nconfig:\n  fuzzySearch: true\n</code></pre>"},{"location":"configuration/overview/#style","title":"Style","text":""},{"location":"configuration/overview/#theme","title":"Theme","text":"<p>SnipKit supports multiple themes out of the box and also allows you to define your own themes:</p> config.yaml<pre><code>version: 1.1.1\nconfig:\n  style:\n    theme: \"default\"\n</code></pre> <p>If the theme is not shipped with snipkit, it will try to look up a custom theme. If the theme is named <code>&lt;xx&gt;</code>, the theme file must be located at <code>&lt;SNIPKIT_HOME&gt;/&lt;xxx&gt;.yaml</code>.</p> <p>For a list of supported default themes, have a look at the Themes page.</p>"},{"location":"configuration/overview/#hide-keymap","title":"Hide Keymap","text":"<p>By default, a help for the key mapping is displayed at the bottom of the screen. To save same screen space, this can be  disabled:</p> config.yaml<pre><code>version: 1.1.1\nconfig:\n  style:\n    hideKeyMap: true\n</code></pre>"},{"location":"configuration/overview/#script-options","title":"Script Options","text":""},{"location":"configuration/overview/#shell","title":"Shell","text":"<p>The shell for script executions is defined by the <code>$SHELL</code> environment variable. This behavior can be overwritten by setting the <code>shell</code> option to a non-empty string, e.g.:</p> config.yaml<pre><code>version: 1.1.1 \nconfig:\n  script:\n    shell: \"/bin/zsh\"\n</code></pre> <p>If neither <code>$SHELL</code> nor the config option <code>shell</code> is defined, SnipKit will try to use <code>/bin/bash</code> as a fallback value.</p>"},{"location":"configuration/overview/#parameter-mode","title":"Parameter mode","text":"<p>How values are injected into your snippet for the defined parameters is defined by the <code>parameterMode</code> option:</p> config.yaml<pre><code>version: 1.1.1\nconfig:\n  script:\n    parameterMode: SET\n</code></pre> <p>The default value is <code>SET</code>, defining that values should be set as variables. This means that the following script</p> Raw snippet before execution<pre><code># ${VAR} Description: What to print\necho ${VAR}\n</code></pre> <p>will be updated in the following way, e.g. for <code>VAR = \"Hello word\"</code>:</p> Example for parameterMode SET<pre><code># ${VAR} Description: What to print\nVAR=\"Hello world\"\necho ${VAR}\n</code></pre> <p>Alternatively, all occurrences of a parameter can be replaced with the actual value when  specifying <code>REPLACE</code> for <code>parameterMode</code>:</p> Example for parameterMode = REPLACE<pre><code>echo \"Hello world\"\n</code></pre>"},{"location":"configuration/overview/#remove-comments","title":"Remove Comments","text":"<p>SnipKit will remove all parameter comments from a snippet when specifying <code>removeComments</code>:</p> config.yaml<pre><code>version: 1.1.1\nconfig:\n  script:\n    removeComments: true\n</code></pre> <p>This means that the following script</p> Raw snippet before execution<pre><code># ${VAR} Description: What to print\necho ${VAR}\n</code></pre> <p>will be formatted in the following way:</p> Example for removeComments = true<pre><code>echo ${VAR}\n</code></pre> <p>Info</p> <p>Comments will always be removed if <code>parameterMode</code> is set to <code>REPLACE</code>.</p>"},{"location":"configuration/overview/#confirm-commands","title":"Confirm Commands","text":"<p>If you always want to explicitly confirm the command before execution, specify the <code>execConfirm</code> option as follows:</p> config.yaml<pre><code>version: 1.1.1\nconfig:\n  script:\n    execConfirm: true\n</code></pre> <p>Flag --confirm</p> <p>The same functionality can be achieved by means of the <code>--confirm</code> flag: <pre><code>snipkit exec --confirm\n</code></pre> Use the flag instead of the config option if you only want to explicitly confirm the command in some cases.</p>"},{"location":"configuration/overview/#print-commands","title":"Print Commands","text":"<p>SnipKit will print the command to be executed on stdout if specified by the <code>execPrint</code> commands:</p> config.yaml<pre><code>version: 1.1.1\nconfig:\n  script:\n    execPrint: true\n</code></pre> <p>Flag -p or --print</p> <p>The same functionality can be achieved by means of the <code>-p</code> or <code>--print</code> flag: <pre><code>snipkit exec --print\n</code></pre> Use the flag instead of the config option if you only want to print the command every now and then.</p>"},{"location":"configuration/overview/#clean-up","title":"Clean up","text":"<p>The config file as well as all custom themes can be deleted with:</p> <pre><code>snipkit config clean\n</code></pre> <p>The cleanup method is a way to remove all SnipKit artifacts from your hard drive. It only deletes contents of the SnipKit home directory. If this directory is empty at the end of the cleanup process, it will be deleted as well.</p>"},{"location":"configuration/themes/","title":"Themes","text":"<p>SnipKit supports built-in themes as well as the possibility to define your own custom themes.</p> <p>In order to pick a different theme, edit the configuration:</p> config.yaml<pre><code>version: 1.0.0\nconfig:\n  style:\n    theme: simple\n</code></pre> <p>Themes may have different variants for light &amp; dark backgrounds, depending on your terminal.</p> <p>Enforce light or dark theme</p> <p>Sometimes SnipKit is not able to detect if you're using a light or dark background correctly. You can force a specific theme variant by explicitly defining the <code>.light</code> or <code>.dark</code> suffix, e.g., <code>default.light</code> or <code>default.dark</code> as theme name in your <code>config.yaml</code>.</p>"},{"location":"configuration/themes/#built-in-themes","title":"Built-in themes","text":"<p>As of now, the following themes are supported:</p>"},{"location":"configuration/themes/#default-theme","title":"Default Theme","text":""},{"location":"configuration/themes/#dark","title":"Dark","text":""},{"location":"configuration/themes/#light","title":"Light","text":""},{"location":"configuration/themes/#simple-theme","title":"Simple Theme","text":""},{"location":"configuration/themes/#custom-themes","title":"Custom themes","text":"<p>Custom themes should be placed in the directory <code>&lt;snipkit_home&gt;/themes/</code>, <code>&lt;snikit_home&gt;</code> referring to the directory where your configuration lives.</p> <p>A theme called <code>custom-theme</code> should be put into a file named <code>custom-theme.yaml</code>. The contents are as follows:</p> custom-theme.yaml<pre><code>version: 1.0.0\nvariables:\n  white: \"#FFFFFF\"\n  black: \"#000000\"\n  red: \"#ED6A5A\"\n  green: \"#44AF69\"\n  yellow: \"#FCAB10\"\n  brown: \"#3A3335\"\n  gray: \"#8A8A8A\"\n  lightGray: \"#DDDADA\"\ntheme:\n  borderColor: ${gray}\n  borderTitleColor: ${gray}\n  previewColorSchemeName: \"pastie\"\n  textColor: \"\" # if empty the default terminal foreground color will be used\n  subduedColor: ${gray}\n  subduedContrastColor: ${black}\n  verySubduedColor: ${lightGray}\n  verySubduedContrastColor: ${black}\n  activeColor: ${red} #\n  activeContrastColor: ${white}\n  titleColor: ${brown}\n  titleContrastColor: ${white}\n  highlightColor: ${green}\n  highlightContrastColor: ${black}\n  infoColor: ${yellow}\n  infoContrastColor: ${white}\n  snippetColor: ${lightGray}\n  snippetContrastColor: ${black}\n</code></pre> <p>Example themes</p> <p>You can have a look at the built-in themes for some examples.</p> <p>Dark &amp; Light themes</p> <p>You can define themes differently for light &amp; dark terminal backgrounds. Just add the suffix <code>.light.yaml</code>  respectively <code>.dark.yaml</code> to the filename (e.g., <code>example-theme.light.yaml</code>).  SnipKit will pick the appropriate theme automatically. </p>"},{"location":"configuration/themes/#variables","title":"Variables","text":"<p>The usage of variables in the theme is optional. Variables help you to reuse the same color and, thus, make the theme more readable. If you don't want to use a variable, just specify the color directly, e.g.:</p> <pre><code>titleColor: \"#FF0000\"\n</code></pre>"},{"location":"configuration/themes/#supported-colors","title":"Supported colors","text":"<p>You can either use the hex value or an ANSI code to specify a color, e.g.: <code>#c0c0c0</code> or <code>7</code> for a light-gray color.</p> <p>Implementation detail</p> <p>The underlying library used for the colors is termenv.  The Readme gives a good overview of available ANSI colors.</p>"},{"location":"getting-started/overview/","title":"Overview","text":""},{"location":"getting-started/overview/#usage","title":"Usage","text":"<pre><code>$ snipkit -h\nSnipkit helps you to execute scripts saved in your favorite snippets manager without even leaving the terminal.\n\nUsage:\n  snipkit [flags]\n  snipkit [command]\n\nAvailable Commands:\n  browse      Browse all snippets without executing them\n  completion  Generate the autocompletion script for the specified shell\n  config      Manage your snipkit configuration file\n  exec        Execute a snippet directly from the terminal\n  help        Help about any command\n  info        Provides useful information about the snipkit configuration\n  manager     Manage the snippet managers snipkit connects to\n  print       Prints the snippet on stdout\n\nFlags:\n  -c, --config string      config file (default \"/Users/pse/Library/Application Support/snipkit/config.yaml\")\n  -h, --help               help for snipkit\n  -l, --log-level string   log level used for debugging problems (supported values: trace,debug,info,warn,error,fatal,panic) (default \"panic\")\n  -v, --version            version for snipkit\n\nUse \"snipkit [command] --help\" for more information about a command.\n</code></pre>"},{"location":"getting-started/overview/#init-a-config-file","title":"Init a config file","text":"<p>Upon first usage, you have to create a config file.</p> Create a new config file<pre><code>snipkit config init\n</code></pre> <p>Edit the config file manually</p> <p>SnipKit has a lot more configuration options. Please see Configuration if you encounter problems or want to modify the behavior.</p> <p>As of now, no external snippet manager is configured.</p> Add an external snippet manager<pre><code>snipkit manager add\n</code></pre> <p>You will be presented with a list of supported managers. Pick the one you want to use. After that, you should be ready to go.</p> <p>Different manager need different configuration</p> <p>Every manager has unique configuration options. Have a look at Managers for more information.</p>"},{"location":"getting-started/overview/#snippet-commands","title":"Snippet Commands","text":""},{"location":"getting-started/overview/#execute-snippets","title":"Execute snippets","text":"Execute a snippet<pre><code>snipkit exec\n</code></pre> <p>Confirm commands</p> <p>If you want to confirm a command before execution (with all parameters being resolved) add the  flag <code>--confirm</code>: <pre><code>snipkit exec --confirm\n</code></pre> Snpkit will print the command on stdout and ask you to explicitly confirm its execution.</p> <p>Print snippet on stdout</p> <p>If you want to print the command that is executed add the flag <code>-p</code> or <code>--print</code>.</p>"},{"location":"getting-started/overview/#print-snippets","title":"Print snippets","text":"<p>You can print snippets to stdout without executing them.</p> Print a snippet<pre><code>snipkit print\n</code></pre>"},{"location":"getting-started/overview/#browse-snippets","title":"Browse snippets","text":"<p>You can browse all available snippets without executing or printing them.</p> Browse all snippets<pre><code>snipkit browse\n</code></pre>"},{"location":"getting-started/parameters/","title":"Parameters","text":"<p>In order to support snippet parameters, SnipKit requires some special parameter syntax in your scripts.</p> <p>Info</p> <p>The good thing about the parameter syntax used by SnipKit is that your scripts remain fully functional even when not executed via SnipKit. All parameter information is described by the usage of comments and, thus, can be regarded as a consistent way to document your scripts.</p>"},{"location":"getting-started/parameters/#parameter-names-descriptions","title":"Parameter Names &amp; Descriptions","text":"Example snippet<pre><code># some comment\n# ${VAR1} Name: First Output\n# ${VAR1} Description: What to print on the terminal first\necho \"${VAR1}\"\n</code></pre> <p>Each comment which corresponds to a variable starts with <code># ${&lt;varName&gt;}</code> with <code>&lt;varName&gt;</code> referring to the variable name used in your script (e.g., <code>VAR1</code> in the example).</p> <ul> <li>Line 1 is ignored by SnipKit since it does not adhere to this pattern.</li> <li>Line 2 defines the name of the parameter as displayed by SnipKit when presenting you parameter input form.</li> <li>Line 3 describes the usage of the parameter. As of now, the description will be used as a placeholder value for an empty   parameter input field.</li> <li>Line 4 uses the parameter. It does not correspond to the parameter syntax and belongs to your script.</li> </ul> <p>Note</p> <p>If you don't specify a parameter name, the name of the variable will be used instead, e.g., <code>VAR1</code> in the example.</p>"},{"location":"getting-started/parameters/#default-values","title":"Default Values","text":"<p>You can define a default value for each parameter:</p> Example snippet with a parameter default value<pre><code># some comment\n# ${VAR1} Default: Hello World!\necho \"${VAR1}\"\n</code></pre> <p>This way, the input field for parameter <code>VAR1</code> will be automatically filled with <code>Hello World</code>.</p>"},{"location":"getting-started/parameters/#pre-defined-values","title":"Pre-defined values","text":"<p>You can add multiple pre-defined values for a parameter in order to ease filling the input form:</p> Example snippet with pre-defined values for a parameter<pre><code># some comment\n# ${VAR1} Values: One + some more, \"Two\",Three,  ,\n# ${VAR1} Values: Four\\, and some more, Five\necho \"${VAR1}\"\n</code></pre> <p>The example defines the values <code>One + some more</code>, <code>\"Two\"</code>, <code>Three</code>, <code>Four, and some more</code>, and <code>Five</code>. Empty pre-defined values will be omitted.</p> <p></p> <p>You can define multiple lines starting with <code>${&lt;varname&gt;} Values:</code> to list pre-defined values. The listed values will be joined by SnipKit. Each value must be seperated by the next via the character <code>,</code>.</p> <p>Attention</p> <p>If the value contains a comma itself, it needs to be escaped via <code>\\,</code>.</p>"},{"location":"getting-started/parameters/#passwords","title":"Passwords","text":"<p>A parameter can be marked to be a password. In this case, the actual characters of the input will be masked.</p> Example snippet with a PASSWORD parameter<pre><code># ${PW} Name: Login password\n# ${PW} Type: PASSWORD\nlogin ${PW}\n</code></pre> <p></p> <p>Marking the parameter <code>PW</code> as password happens in line 2 by defining <code>Type: PASSWOPRD</code>.</p>"},{"location":"getting-started/parameters/#paths","title":"Paths","text":"<p>Often, parameters are a path to a file or a directory. In this case, SnipKit is able to provide you with autocomplete suggestions:</p> Example snippet with a PATH parameters<pre><code># ${FILE} Name: File path\n# ${FILE} Type: PATH\ngit ls-files \"${FILE}\" | xargs wc -l\n</code></pre> <p></p> <p>Marking the parameter <code>PW</code> as password happens in line 2 by defining <code>Type: PASSWOPRD</code>.</p>"},{"location":"getting-started/power-setup/","title":"Power setup","text":""},{"location":"getting-started/power-setup/#alias","title":"Alias","text":"<p>Always typing the full name <code>snipkit</code> in order to open the manager might be too cumbersome for you. Instead, define an alias (e.g. in your <code>.zshrc</code> file):</p> <pre><code># SnipKit alais\nsn () {\n  snipkit $1\n}\n</code></pre> <p>Then you can just type <code>sn</code> instead of <code>snipkit</code> to open SnipKit.</p>"},{"location":"getting-started/power-setup/#default-root-command","title":"Default Root Command","text":"<p>Most of the time, you want to call the same subcommand, e.g. <code>print</code> or <code>exec</code>. You can configure <code>snipkit</code> so that this command gets executed by default by editing the config:</p> <p>Example:</p> <pre><code># snipkit config edit \ndefaultRootCommand: \"exec\"\n</code></pre> <p>With this setup, calling <code>sn</code> will yield the same result as <code>snipkit exec</code>. If you want to call the <code>print</code> command instead, type <code>sn print</code>.</p>"},{"location":"managers/fslibrary/","title":"File System Library","text":"<p>Available for: macOS, Linux</p> <p>The file system library manager lets you provide snippets via multiple local directories. Each directory contains files which correspond to snippets.</p>"},{"location":"managers/fslibrary/#configuration","title":"Configuration","text":"<p>The configuration for the file system library may look similar to this:</p> config.yaml<pre><code>manager:\n  fsLibrary:\n    # If set to false, the files specified via libraryPath will not be provided to you.\n    enabled: true\n    # Paths directories that hold snippets files. Each file must hold one snippet only.\n    libraryPath:\n      - /path/to/file/system/library\n      - /another/path\n    # Only files with endings which match one of the listed suffixes will be considered.\n    suffixRegex:\n      - .sh\n    # If set to true, the files will not be parsed in advance. This means, only the filename can be used as the snippet name.\n    lazyOpen: false\n    # If set to true, the title comment will not be shown in the preview window.\n    hideTitleInPreview: true\n</code></pre>"},{"location":"managers/fslibrary/#snippet-names","title":"Snippet Names","text":"<p>By default, the file name will be used as the snippet name. E.g., snippet <code>/another/path/count-character.sh</code> will be  presented to you as <code>count-character.sh</code> in the lookup window.</p> <p>However, SnipKit lets you also provide a different snippet name via a special comment syntax:</p> <pre><code>#\n# &lt;custom snippet name&gt;\n#\n</code></pre> <p>The start of this comment must be within the first 3 lines of the file. If the first of three consecutive lines starting with <code>#</code> is after line 3, the snippet name will be ignored.</p> <p>E.g., a valid snippet named <code>Do something</code> instead of <code>example.sh</code> may look like this:</p> example.sh<pre><code>#!/bin/bash\n\n#\n# Do something\n#\n\necho \"here we go...\"\n</code></pre> <p>Open snippets lazily</p> <p>This only works if <code>lazyOpen</code> is set to false since the snippet files must be parsed in advance before presenting the lookup window. If set to <code>true</code>, only the filename can be used as snippet name.</p> <p>Hide the title comment</p> <p>If you don't want to show the title header in the snippet preview window, set <code>hideTitleInPreview: true</code>. SnipKit will remove the title header.</p>"},{"location":"managers/githubgist/","title":"GitHub Gist","text":"<p>Available for: macOS, Linux</p> <p>The GitHub Gist manager lets you provide snippets via multiple GitHub accounts. Each gist may contain multiple files which  are mapped to single snippets. The gists are cached locally and synchronized manually, so accessing them is very fast.</p> <p>Example Gist</p> <p>Upon adding the GitHub Gist manager via <code>snipkit manager add</code>, SnipKit will configure a working  example gist, so you can quickly see how it works.</p>"},{"location":"managers/githubgist/#configuration","title":"Configuration","text":"<p>The configuration for the GitHub Gist manager may look similar to this:</p> config.yaml<pre><code>manager:\n    githubGist:\n      # If set to false, github gist is disabled completely.\n      enabled: true\n      # You can define multiple independent GitHub Gist sources.\n      gists:\n        - # If set to false, this GitHub gist url is ignored.\n          enabled: true\n          # URL to the GitHub gist account.\n          url: gist.github.com/lemoony\n          # Supported values: None, OAuthDeviceFlow, PAT. Default value: None (which means no authentication). In order to retrieve secret gists, you must be authenticated.\n          authenticationMethod: OAuthDeviceFlow\n          # If this list is not empty, only those gists that match the listed tags will be provided to you.\n          includeTags: [snipkitExample]\n          # Only gist files with endings which match one of the listed suffixes will be considered.\n          suffixRegex: [.sh]\n          # Defines where the snippet name is extracted from (see also titleHeaderEnabled). Allowed values: DESCRIPTION, FILENAME, COMBINE, COMBINE_PREFER_DESCRIPTION.\n          nameMode: COMBINE_PREFER_DESCRIPTION\n          # If set to true, any tags will be removed from the description.\n          removeTagsFromDescription: true\n          # If set to true, the snippet title can be overwritten by defining a title header within the gist.\n          titleHeaderEnabled: true\n          # If set to true, the title header comment will not be shown in the preview window.\n          hideTitleInPreview: true\n</code></pre>"},{"location":"managers/githubgist/#synchronization","title":"Synchronization","text":"<p>All gists are cached locally. If there are updates, you have to manually trigger a synchronization process via</p> <pre><code>snipkit manager sync\n</code></pre> <p>There is also a shorthand alias:</p> <pre><code>snipkit sync\n</code></pre>"},{"location":"managers/githubgist/#authentication","title":"Authentication","text":"<p>If <code>authenticationMethod</code> is set to <code>None</code>, only public gists are available. In order to retrieve secret gists, use one of the following values:</p> <ul> <li><code>PAT</code></li> <li><code>OAuthDeviceFlow</code></li> </ul> <p>Value <code>PAT</code> refers to a personalized access token, which has to be created manually. <code>OAuthDeviceFlow</code> refers to the OAuth Device Flow supported by GitHub. In both cases,  the scope of the token is limited to <code>gist</code>.</p> <p>After specifying the desired authentication mechanism, just trigger a synchronization via <code>snipkit sync</code>. Snipkit will ask you for the PAT or perform the OAuth authorization. The access token will be stored securely (e.g., by means of Keychain  on macOS).</p> <p>PAT vs OAuth</p> <p>If you want to use a PAT or OAuth. Both mechanisms have different advantages. With a personalized access token, you have  full control over the expiration date, but you have to create the token yourself. The OAuth mechanism is more convenient  since you don't have to create a token yourself. However, the token may expire sooner and you have to perform the  authentication process more often.</p>"},{"location":"managers/githubgist/#custom-oauth-client-id","title":"Custom OAuth Client ID","text":"<p>One option which is not listed by default, since it won't be required very often, is the following:</p> config.yaml<pre><code>manager:\n    githubGist:\n      OAuthClientID: &lt;client_id&gt;\n</code></pre> <p>The <code>OAuthClientID</code> lets you specify a custom client ID when performing the OAuth authentication. This is only required if  your gists are not hosted on github.com and you want to use <code>OAuthDeviceFlow</code>.</p>"},{"location":"managers/githubgist/#snippet-names","title":"Snippet Names","text":"<p>The name of a snippet can be retrieved by multiple ways. Set config option <code>nameMode</code> to one of  the following values:</p> <ul> <li><code>DESCRIPTION</code>: The description of the gist will be used as name. If a gist contains multiple files, all snippets will      have the same name.</li> <li><code>FILENAME</code>: The filename of the gist will be used as name.</li> <li><code>COMBINE</code>: The description and the filename of the gist will be concatenated (<code>&lt;description&gt; - &lt;filename&gt;</code>). </li> <li><code>COMBINE_PREFER_DESCRIPTION</code>:  The description of the gist will be used as name. If a gist contains multiple files,      the description and the filename of the gist will be concatenated.</li> </ul> <p>Comment Syntax</p> <p>SnipKit lets you also provide a different snippet name via a special comment syntax. For a more detailed description, please see section Snippet Names in file system directory. In order to enable this feature, set <code>titleHeaderEnabled</code> to <code>true</code>. If a snippet does not contain a title header comment, the specified <code>nameMode</code> will decide the snippet name.</p>"},{"location":"managers/githubgist/#tags","title":"Tags","text":"<p>The description of a gist may contain multiple tags which can be used for filtering via the <code>includeTags</code> option.</p> <p>E.g., a gist with the description <code>Example gist title #test #snipkit</code> is tagged with <code>test</code> and <code>snipkit</code>.  If you have set <code>removeTagsFromDescription</code> to <code>true</code>, only <code>Example gist title</code> will be used as Snippet Name.</p>"},{"location":"managers/overview/","title":"Overview","text":"<p>Managers are the actual provider of snippets.</p>"},{"location":"managers/overview/#supported-managers","title":"Supported managers","text":"<ul> <li>SnippetsLab</li> <li>Snip</li> <li>GitHub Gist (Example gist)</li> <li>Pet</li> <li>MassCode</li> </ul> <p>Moreover, SnipKit allows you to provide snippets via a simple file system directory.</p>"},{"location":"managers/overview/#adding-a-manager","title":"Adding a manager","text":"<p>Adding a manager means that SnipKit will retrieve snippets from it each time it is started. </p> <p>This command lets you add a manager to your configuration:</p> <pre><code>snipkit manager add\n</code></pre> <p>It represents a list of all supported managers that have not been added or enabled in your configuration. It will try to detect the path to the manager and configure everything automatically. If SnipKit thinks it has found the  corresponding manager and everything looks good so far, it will be enabled. Otherwise, all required config options will be added to your config file, however, the manager will be disabled.</p>"},{"location":"managers/overview/#enabling-disabling","title":"Enabling &amp; Disabling","text":"<p>Each manager can be enabled or disabled. By default, all managers are disabled:</p> config.yaml<pre><code>manager:\n    &lt;managerName&gt;:\n      # If set to false, the &lt;managerName&gt; is disabled \n      enabled: true\n</code></pre> <p>If a manager does not work, SnipKit refuses to startup. In this case, disable the manager by setting <code>enabled: false</code> or  fix the configuration.</p>"},{"location":"managers/pet/","title":"Pet","text":"<p>Available for: macOS, Linux</p> <p>Repository</p>"},{"location":"managers/pet/#configuration","title":"Configuration","text":"<p>The configuration for Pet may look similar to this:</p> config.yaml<pre><code>manager:\n    pet:\n      # Set to true if you want to use pet.\n      enabled: true\n      # List of pet snippet files.\n      libraryPaths:\n        - /Users/testuser/.config/pet/snippet.toml\n      # If this list is not empty, only those snippets that match the listed tags will be provided to you.\n      includeTags:\n        - snipkit\n        - othertag\n</code></pre> <p>Upon adding Pet as a manager, SnipKit will try to detect a default <code>librayPath</code> automatically. If the library file was not found, <code>enabled</code> will be set to <code>false</code>.</p> <p>With this example configuration, SnipKit gets all snippets from Pet which are tagged <code>snipkit</code> or <code>othertag</code>. All other snippets will not be presented to you. If you don't want to filter for tags, set <code>includeTags: []</code>.</p>"},{"location":"managers/pet/#parameter","title":"Parameter","text":"<p>Pet comes with its own parameter syntax in the form of <code>&lt;param&gt;</code>, <code>&lt;param=default_value&gt;</code> or <code>&lt;param=|_value1_||_value2_|&gt;</code>.  SnipKit supports this syntax and you should have no problems using your Pet snippets the same way in SnipKit.</p> <p>Tip</p> <p>While being easy to use, Pet's parameter syntax is less expressive than the one of SnipKit. Migrate to the  file system directory manager if you want to take advantage of the additional SnipKit  features like multiple value options or parameter descriptions.</p>"},{"location":"managers/pictarinesnip/","title":"Snip","text":"<p>Available for: macOS</p> <p>Homepage</p> <p>Repository</p>"},{"location":"managers/pictarinesnip/#configuration","title":"Configuration","text":"<p>The configuration for Snip may look similar to this:</p> config.yaml<pre><code>manager:\n    pictarineSnip:\n      # Set to true if you want to use Snip.\n      enabled: true\n      # Path to the snippets file.\n      libraryPath: /Users/&lt;user&gt;/Library/Containers/com.pictarine.Snip/Data/Library/Application Support/Snip/snippets\n      # If this list is not empty, only those snippets that match the listed tags will be provided to you.\n      includeTags:\n        - snipkit\n        - othertag\n</code></pre> <p>Upon adding Snip as a manager, SnipKit will try to detect the <code>librayPath</code> automatically. If the library file was not found, <code>enabled</code> will be set to <code>false</code>.</p> <p>With this example configuration, SnipKit gets all snippets from Snip which are tagged <code>snipkit</code> or <code>othertag</code>. All other snippets will not be presented to you. If you don't want to filter for tags, set <code>includeTags: []</code>.</p>"},{"location":"managers/snippetslab/","title":"SnippetsLab","text":"<p>Available for: macOS</p> <p>Homepeage</p>"},{"location":"managers/snippetslab/#configuration","title":"Configuration","text":"<p>The configuration for SnippetsLab may look similar to this:</p> config.yaml<pre><code>manager:\n    snippetsLab:\n      # Set to true if you want to use SnippetsLab.\n      enabled: true\n      # Path to your *.snippetslablibrary file.\n      # SnipKit will try to detect this file automatically when generating the config.\n      libraryPath: /path/to/main.snippetslablibrary\n      # If this list is not empty, only those snippets that match the listed tags will be provided to you.\n      includeTags:\n        - snipkit\n        - othertag\n</code></pre> <p>With this example configuration, SnipKit gets all snippets from SnippetsLab which are tagged with <code>snipkit</code> or <code>othertag</code>. All other snippets will not be presented to you. If you don't want to filter for tags, set <code>includeTags: []</code>.</p>"},{"location":"managers/snippetslab/#library-path","title":"Library path","text":"<p>Snipkit will try to automatically detect the path to the currently configured <code>*.snippetslablibrary</code> file.</p> <p>If you have iCloud sync enabled, the path will be similar to:</p> <p><pre><code>/Users/&lt;user&gt;/Library/Containers/com.renfei.SnippetsLab/Data/Library/Application Support/com.renfei.SnippetsLab/main.snippetslablibrary\n</code></pre> SnippetsLab lets you configure a custom library path. In this case, SnipKit will try to detect the preferences file of SnippetsLab:</p> <pre><code>/Users/&lt;user&gt;/Library/Containers/com.renfei.SnippetsLab/Data/Library/Preferences/com.renfei.SnippetsLab.plist\n</code></pre> <p>The preferences file holds the path to the current <code>*.snippetslablibrary</code> file (if iCloud sync is turned off).</p>"}]}